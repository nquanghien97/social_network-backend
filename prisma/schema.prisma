generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                Int            @id @default(autoincrement())
  email             String         @unique @db.VarChar(255)
  password          String         @db.VarChar(255)
  fullName          String?        @db.VarChar(255)
  location          String?        @db.VarChar(255)
  imageUrl          String?        @db.VarChar(255)
  job               String?        @db.VarChar(255)
  description       String?        @db.VarChar(255)
  cloudinary_id     String?        @db.VarChar(255)
  createdAt         DateTime       @default(now()) @db.Timestamp(0)
  updatedAt         DateTime       @updatedAt @db.Timestamp(0)
  posts             Post[]
  followers         Follows[]      @relation("following")
  following         Follows[]      @relation("follower")
  comments          Comments[]
  userToken         RefreshToken[]
  friends           Friends[]      @relation(name: "users")
  friendUserFriends Friends[]      @relation(name: "friend_users")
  like      Like[]     
}

model Friends {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(name: "users", fields: [userId], references: [id])
  friendId  Int
  friend    User     @relation(name: "friend_users", fields: [friendId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id            String     @id @unique @default(uuid())
  title         String?    @db.VarChar(255)
  text          String?    @db.VarChar(255)
  imageUrl      String?    @db.VarChar(255)
  cloudinary_id String?    @db.VarChar(255)
  author          User       @relation(fields: [userId], references: [id])
  userId        Int
  comments      Comments[]
  like    Like[]
  createdAt     DateTime   @default(now()) @db.Timestamp(0)
  updatedAt     DateTime   @updatedAt @db.Timestamp(0)
}

model Follows {
  follower    User @relation("follower", fields: [followerId], references: [id])
  followerId  Int
  following   User @relation("following", fields: [followingId], references: [id])
  followingId Int

  @@id([followerId, followingId])
}

model Comments {
  id        String      @id @unique @default(uuid())
  content   String?     @db.VarChar(255)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt @db.Timestamp(0)
  author    User        @relation(fields: [userId], references: [id])
  userId    Int
  post      Post        @relation(fields: [postId], references: [id])
  postId    String
  parent    Comments?   @relation("ParentChild", fields: [parentId], references: [id])
  parentId  String?
  children  Comments[]  @relation("ParentChild")
}

model RefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String   @db.VarChar(255)
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
}

model Like {
  id          String    @id @unique @default(uuid())
  userId      Int
  author      User      @relation(fields: [userId], references: [id])
  postId      String
  post        Post      @relation(fields: [postId], references: [id])
  createdAt   DateTime  @default(now())
}
