generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id                Int            @id @default(autoincrement())
  email             String         @unique @db.VarChar(255)
  password          String         @db.VarChar(255)
  fullName          String?        @db.VarChar(255)
  location          String?        @db.VarChar(255)
  imageUrl          String?        @db.VarChar(255)
  job               String?        @db.VarChar(255)
  description       String?        @db.VarChar(255)
  cloudinary_id     String?        @db.VarChar(255)
  createdAt         DateTime       @default(now()) @db.Timestamp(0)
  updatedAt         DateTime       @updatedAt @db.Timestamp(0)
  isValidEmail      Boolean?       @default(false)  
  comments          Comments[]
  following         Follows[]      @relation("follower")
  followers         Follows[]      @relation("following")
  friendUserFriends Friends[]      @relation("friend_users")
  friends           Friends[]      @relation("users")
  like              Like[]
  posts             Post[]
  userToken         RefreshToken[]
  emailToken        Token[]
  sentMessages      Message[] @relation("SentMessages")
  receivedMessages  Message[] @relation("ReceivedMessages")
  conversation      Conversation[]
}

model Friends {
  id        Int      @id @default(autoincrement())
  userId    Int
  friendId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  friend    User     @relation("friend_users", fields: [friendId], references: [id])
  user      User     @relation("users", fields: [userId], references: [id])
}

model Post {
  id            String     @id @unique @default(uuid())
  title         String?    @db.VarChar(255)
  text          String?    @db.VarChar(255)
  imageUrl      String?    @db.VarChar(255)
  cloudinary_id String?    @db.VarChar(255)
  userId        Int
  createdAt     DateTime   @default(now()) @db.Timestamp(0)
  updatedAt     DateTime   @updatedAt @db.Timestamp(0)
  comments      Comments[]
  like          Like[]
  author        User       @relation(fields: [userId], references: [id])
}

model Follows {
  followerId  Int
  followingId Int
  id          Int  @id @default(autoincrement())
  follower    User @relation("follower", fields: [followerId], references: [id])
  following   User @relation("following", fields: [followingId], references: [id])
}

model Comments {
  id        String     @id @unique @default(uuid())
  content   String?    @db.VarChar(255)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt @db.Timestamp(0)
  userId    Int
  postId    String
  parentId  String?
  parent    Comments?  @relation("ParentChild", fields: [parentId], references: [id])
  children  Comments[] @relation("ParentChild")
  post      Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
  author    User       @relation(fields: [userId], references: [id])
}

model RefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String   @db.VarChar(255)
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
}

model Token {
  id          String   @id @unique @default(uuid())
  token String   @db.VarChar(255)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
}

model Like {
  id        String   @id @unique @default(uuid())
  userId    Int
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  author    User     @relation(fields: [userId], references: [id])
}

model Message {
  id            String   @id @unique @default(uuid())
  text          String   @db.VarChar(255)
  createdAt     DateTime @default(now()) @db.Timestamp(0)
  sender        User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId      Int
  receiver      User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId    Int
  conversation  Conversation[] 
}

model Conversation {
  id           String    @id @default(uuid())
  participants User[]
  messages     Message[]
  createAt     DateTime @default(now())
}
