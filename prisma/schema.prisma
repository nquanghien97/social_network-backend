generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id                String             @id @default(uuid())
  email             String             @unique @db.VarChar(255)
  password          String             @db.VarChar(255)
  fullName          String?            @db.VarChar(255)
  location          String?            @db.VarChar(255)
  imageUrl          String?            @db.VarChar(255)
  job               String?            @db.VarChar(255)
  description       String?            @db.VarChar(255)
  cloudinary_id     String?            @db.VarChar(255)
  createdAt         DateTime           @default(now()) @db.Timestamp(0)
  updatedAt         DateTime           @updatedAt @db.Timestamp(0)
  isValidEmail      Boolean?           @default(false)
  comments          Comments[]
  following         Follows[]          @relation("follower")
  followers         Follows[]          @relation("following")
  friendUserFriends Friends[]          @relation("friend_users")
  friends           Friends[]          @relation("users")
  like              Like[]
  posts             Post[]
  userToken         RefreshToken[]
  emailToken        Token[]
  sentMessages      Message[]          @relation("SentMessages")
  conversation      ConversationUser[]
}

model Friends {
  id        String      @id @default(uuid())
  userId    String
  friendId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  friend    User     @relation("friend_users", fields: [friendId], references: [id])
  user      User     @relation("users", fields: [userId], references: [id])
}

model Post {
  id            String     @id @unique @default(uuid())
  title         String?    @db.VarChar(255)
  text          String?    @db.VarChar(255)
  imageUrl      String?    @db.VarChar(255)
  cloudinary_id String?    @db.VarChar(255)
  userId        String
  createdAt     DateTime   @default(now()) @db.Timestamp(0)
  updatedAt     DateTime   @updatedAt @db.Timestamp(0)
  comments      Comments[]
  like          Like[]
  author        User       @relation(fields: [userId], references: [id])
}

model Follows {
  followerId  String
  followingId String
  id          String  @id @default(uuid())
  follower    User @relation("follower", fields: [followerId], references: [id])
  following   User @relation("following", fields: [followingId], references: [id])
}

model Comments {
  id        String     @id @unique @default(uuid())
  content   String?    @db.VarChar(255)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt @db.Timestamp(0)
  userId    String
  postId    String
  parentId  String?
  parent    Comments?  @relation("ParentChild", fields: [parentId], references: [id])
  children  Comments[] @relation("ParentChild")
  post      Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
  author    User       @relation(fields: [userId], references: [id])
}

model RefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String   @db.VarChar(255)
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model Token {
  id        String   @id @unique @default(uuid())
  token     String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Like {
  id        String   @id @unique @default(uuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  author    User     @relation(fields: [userId], references: [id])
}

model Message {
  id             String        @id @unique @default(uuid())
  text           String        @db.VarChar(255)
  createdAt      DateTime      @default(now()) @db.Timestamp(0)
  author         User          @relation("SentMessages", fields: [authorId], references: [id])
  authorId       String        @default(uuid())
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
}

model Conversation {
  id           String             @id @default(uuid())
  messages     Message[]
  createAt     DateTime           @default(now())
  participants ConversationUser[]
}

model ConversationUser {
  id             String       @id @default(uuid())
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  isRead         Boolean      @default(true)
}
